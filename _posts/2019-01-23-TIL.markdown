---
layout: post
title:  "TIL: 2019.01.23"
date:   2019-01-23 23:59:59
author: Jamie
categories: TIL
tags: Base64 BitwiseOperation
cover:  "/assets/cover/pokercards.jpeg"
---

## 카드게임 앱 프로젝트 시작!

드디어 자판기 앱 프로젝트를 마무리하고, 카드게임 앱을 시작하게 되었다! 👏🏻👏🏻👏🏻 이번 미션에서도 지난 미션에서 만들었던 코드를 가져와서 모델로 사용할 듯 싶은데, 과연 어디를 얼마나 수정하게될까 내가 구현을 잘해놓았던 걸까 아닐까 정말 궁금하다ㅎㅎ!!

- 카드게임 앱 프로젝트를 생성하고, 카드게임 판을 구성해보았다. 카드이미지를 담을 `CardImageView` 커스텀 뷰 클래스를 구현하여, 스토리보드가 아닌 뷰 컨트롤러 내부에서 추가해주었다. 
- 상단의 StatusBar 스타일도 변경해주었다. 처음에는 `AppDelegate` 에서 `UIApplication.shared` 의 `setStatusBarStyle()` 메소드로 스타일을 변경하려고했지만, Xcode에서 경고를 주었다...! [공식문서](https://developer.apple.com/documentation/uikit/uiapplication/1622923-setstatusbarstyle)를 찾아보니 이 방법은 Deprecated되었으며, iOS 7 이후 부터는 status bar를 뷰 컨트롤러가 관리한다고 명시되어있었다. 그래서 뷰 컨트롤러 클래스에서 `preferredStatusBarStyle` 프로퍼티를 오버라이드하여 `UIStatusBarStyle.lightContent` 로 변경해주었다.
- `UIImage` 로 `UIColor` 를 생성할 수 있다는 것도 알게되었다. 아래 [생성자](https://developer.apple.com/documentation/uikit/uicolor/1621933-init) 설명을 찾아보면 [Quartz](https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007533-SW1) color reference 라는 것이 나오는데, 지난 미션에서 그래프를 그릴 때 사용했던 코어 그래픽스를 가리키는 것이었다.
  - `init(patternImage image: UIImage)`

그래도 이전 미션보다 훨씬 수월하게 진행한 것 같아서, 자판기 앱 프로젝트를 하면서 많이 배웠구나 생각이 들어 뿌듯했다. 🥰 이번 미션도 하나하나 세심하게 공부하면서 열심히 해봐야겠다. 화이팅!

<br>

## Base64

Matplotlib 패키지로 그린 차트를 이미지로 저장하는 과정에서, 파일 저장 외에는 방법이 없을까 고민을 했었다. 그러다가 Json 포맷에 담을 수 있는 문자열로 변환하는 것을 생각했고, **Base64**라는 인코딩 방식을 접하게되었다. 

Base64는 바이너리 데이터를 화면에 표시할 수 있는 아스키 문자로 인코딩하는 방식이다. 그래서 이 인코딩을 거치면 원본보다 약 30% 정도 크기가 늘어나게된다고한다. 

이미지를 서버에 파일로 저장해서 URL로 접근하게하는 방식과, 파일로 저장하지 않고 Base64로 인코딩하여 HTML 이미지 태그에 담아 전송하는 방식 가운데 고민 중이다. 우선, 후자는 **BytesIO** 클래스를 사용하여 인코딩에 성공했다...! 이 문제는 조금 더 고민해봐야할 것 같다.

<br>

## 비트 연산 (Bitwise Operation)

프로그래머스에서 카카오 코딩테스트 기출문제인 [비밀지도](https://programmers.co.kr/learn/courses/30/lessons/17681) 문제를 풀어보았다. 이 문제는 **비트 연산**으로 접근해야하는 문제이다. ~~(접근 방법... 유튜브에서 힌트를 얻었다...)~~ 

```swift
func solution(_ n:Int, _ arr1:[Int], _ arr2:[Int]) -> [String] {
    var answer: [String] = []
    for index in 0..<n {
        let rowBits = UInt16(arr1[index] | arr2[index])
        var targetBit = UInt16(1)
        var walls = ""
        for _ in 0..<n {
            let wall = (rowBits & targetBit) > 0 ? "#" : " "
            walls = wall + walls
            targetBit = targetBit << 1
        }
        answer.append(walls)
    }
    return answer
}

print(solution(5, [9, 20, 28, 18, 11], [30, 1, 21, 17, 28]))
// ["#####","# # #", "### #", "# ##", "#####"]
```

두 배열의 같은 인덱스 요소를 OR 연산(`|`)하여 UInt16 타입으로 변환해주었다. 비교할 비트를 `targetBit` 로 선언해주고, 왼쪽으로 한 비트씩 시프트해주면서 AND(`&`) 연산을 해주었다. 뒷 자리에서부터 비교하기때문에, 추가할 문자를 앞부분에 붙여주었다. [공식문서](https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html)에 나온 그림과 코드를 많이 참고했다. 

```swift
let shiftBits: UInt8 = 4   // 00000100 in binary
shiftBits << 1             // 00001000
shiftBits << 2             // 00010000
shiftBits << 5             // 10000000
shiftBits << 6             // 00000000
shiftBits >> 2             // 00000001
```

처음에는 **UInt8** 타입을 사용했었다. 이 타입으로 프로그래머스 입출력 예제 값 테스트를 성공했는데, 제출하니 절반이나 실패하는 결과가 떴다... 입력 형식을 다시 읽어보고 `1 ≦ n ≦ 16` 조건이 마음에 걸려 잘 생각해보니, 16비트의 수가 들어올 수 있으니까 UInt8 대신 **UInt16**를 사용해야하지 않을까 싶었다. 수정한 결과, 모든 테스트 케이스 통과!! 다른 알고리즘 문제도 차근차근 틈틈히 정리해보아야겠다. 