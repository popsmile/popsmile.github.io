---
layout: post
title:  "TIL: 2019.01.14"
date:   2019-01-14 23:59:00
author: Jamie
categories: TIL
tags: NotificationCenter Objective-C
cover:  "/assets/cover/yellow-memo-on-woodtable.jpeg"
---

## Notification, 데이터도 같이 포스트하기

`NotificationCenter` 를 활용해서, 자판기 앱의 음료구매이력 뷰를 구현해보았다.

아래는 `userInfo` 매개변수로 데이터까지 함께 `postNotification` 하는 Objective-C 메소드이다. 오늘 Objective-C 관련 피드백 강의를 듣고나니, 아래와 같은 Objective-C 문법에 조금 더 익숙해진 것 같다..! :sunglasses: `userInfo` 매개변수는 **[AnyHashable: Any]?** 타입이다.

```objective-c
- (void)postNotificationName:(NSNotificationName)aName 
                      object:(id)anObject 
                    userInfo:(NSDictionary *)aUserInfo;
```

자판기의 구매이력을 저장하는 객체인 `History` 내부에서 `update(beverage:)` 가 호출될 때, 해당 `Beverage` 의 `className` 과 이 객체가 `History.purchases` 이 배열에서 갖는 `index` 값을 딕셔너리에 저장하여 포스트하도록 구현했다.

더불어, 저번주에 추가했던 `didInsertMoney` `didAddBeverage` 노티피케이션도 다시 정리해주었다. 곰곰히 생각해보니, 잔액이 추가되든 줄어들든 잔액 레이블이 리프레시되어야하는 것을 마찬가지였다..! 🤭 그래서 `moneyDataChanged` 로 노티피케이션 네임을 주었고, `post` 하는 위치도 `VendingMachine` 내부가 아닌 `Money` 객체 내부로 옮겨주었다. `Inventory` 객체에도 똑같이 적용해주었다. **객체 외부에서 따로 일을 하지말고, 객체가 내부에서 자신이 처리하도록 일을 시켜라**는 가르침을 이 부분에도 반영해보고자 이렇게 수정해보았다. 또한, 이렇게 정리해줌으로써 뷰 컨트롤러의 `registerAsObserver` 메소드 구현 부가 깔끔해졌다.

<br>

## Objective-C

Swift를 공부하면서, 가끔 자주 종종 마주치는 Objective-C...! 하지만, 문법 표현이 꽤 달라 익숙해지기 어려웠다. 

Objective-C에서는 인스턴스 생성 시에 항상 `alloc` 키워드를 함께 써 메모리에 자리를 잡고, 모든 객체 인스턴스는 포인터로 처리한다. `+` 가 붙어있으면 타입 메소드이고, `-` 가 붙어있으면 인스턴스 메소드이다.

Xcode에서 iOS 프로젝트를 Objective-C로 생성하면 한 클래스에 대해  `.h` 파일과 `.m` 파일 두 개가 생성된다. `.h` 파일은 헤더파일로 선언부이고, `.m` 파일은 메세지(?) 파일로 구현부이다. 이 후자에 구현되어 있고, 헤더파일에 선언되어있다면 private으로 여겨진다고 한다.

다음 번에 Swift로 작성했던 프로젝트 중 하나를 Objective-C로 똑같이 구현해보는 시간을 꼭 가져봐야겠다.