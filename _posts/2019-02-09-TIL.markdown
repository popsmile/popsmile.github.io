---
layout: post
title:  "TIL: 2019.02.09"
date:   2019-02-09 23:59:59
author: Jamie
categories: TIL
tags: Memory
cover:  "/assets/cover/yellow-memo-on-woodtable.jpeg"
---

## Memory Safety

스위프트 공식 문서에서 [Memory Safety](https://docs.swift.org/swift-book/LanguageGuide/MemorySafety.html) 부분을 읽었다. 

- 변수가 사용되기 전에 꼭 초기화가 되도록
- 사용 해제된 메모리에 접근하지 않도록
- 배열 인덱스가 범위를 넘지 않도록
- **같은 한 메모리에 대한 다른 여러 접근이 충돌하지 않도록**

스위프트는 이렇게 여러 방법으로 메모리 관련 문제를 사전에 예방해주고 자동으로 관리해주기 때문에 대부분 메모리 접근에 대해 깊이 생각하지 않아도 된지만, **충돌이 어떻게 발생할 수 있는지 이해**하는 것이 중요하다고한다.

메모리 접근 충돌은 코드의 **다른 부분**이 **같은 메모리 영역**에 **동시**에 접근하려고할 때 발생한다. 그렇다고 해서 꼭 멀티 스레드 환경에서만 발생하는 문제는 아니라고 한다. 이 메모리 접근 충돌은 **2개의 접근이 아래 3가지 조건**을 만족할 때 발생한다.

- 둘 중 적어도 하나는 쓰기 접근 (write access)
  - read access / write access 차이점: 쓰기 접근은 메모리 위치를 변경할 수 있고, 읽기 접근은 하지 않음.
- 둘 다 같은 영역의 메모리에 접근
- 접근하는 시간이 겹침

메모리 접근 시간은 **단기(instantaneous)** 와 **장기(long-term)** 로 나뉜다. ~~instantaneous는 순간적인 이런 뜻이긴하지만, 장기랑 대비하고자 단기라고 했다..~~ 단기 접근은 해당 코드가 실행되고 접근이 끝나기 전까지 다른 코드가 실행되지 않는다. 따라서 두 접근이 모두 단기 접근이면 동시에 일어날 수가 없다! 읽기/쓰기 접근을 포함해서 거의 대부분의 접근이 단기 접근이다.

그렇다면 장기 접근은 무엇이냐하면 이 접근이 실행되고 끝나지 않아도 다른 코드가 실행될 수 있다. 따라서 장기 접근은 다른 메모리 접근과 겹칠 수 있다..! 이렇게 메모리 접근이 겹치는 경우는 함수나 메소드의 **in-out 파라미터** 가 대표적.