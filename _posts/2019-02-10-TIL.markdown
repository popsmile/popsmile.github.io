---
layout: post
title:  "TIL: 2019.02.10"
date:   2019-02-10 23:59:59
author: Jamie
categories: TIL
tags: ARC ReferenceCycle weak
cover:  "/assets/cover/kitchen-stove-sink.jpeg"
---

어제 [Retain Cycle, ARC, Memory Leak 관련 영상](https://www.youtube.com/watch?v=VcoZJ88d-vM&feature=share) 하나를 보고 잠이 들었다. 이전에 [사진액자 앱 프로젝트](https://github.com/code-squad/swift-photoframe/pull/106#discussion_r240474776) 에서 `IBOutlet` 이 `weak` 으로 연결되는 이유를 찾아본 적이 있다. 전에는 처음 접한 내용이라 이론적으로 이해하고 넘어갔는데, 확실히 같은 내용을 다시 또 보게되니까 더 잘 이해가 되는 것 같다.

<br>

## ARC (Automatic Reference Counting)

스위프트에서는 ARC로 메모리를 관리한다. 여기서 **RC**는 **Reference Counting**으로, 메모리를 할당하거나 그 포인터를 참조할 때 카운트를 올리고 사용이 완료되면 카운트를 내려서 메모리를 관리하는 것이다.

-  **MRC** : **Manual** Reference Counting. 이전에는 Objective-C 개발 과정에서 직접 참조 관리를 했다고 한다. 
- **ARC** : **Automatic** Reference Counting. [공식문서](https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html#//apple_ref/doc/uid/TP40014097-CH20-ID48)를 읽어보면 ARC로 메모리를 알아서 관리해주기 때문에, 개발 과정에서 크게 신경쓸 점은 없다고 한다. 하지만, **강한 참조 순환** 문제로 **메모리 누수** 문제가 발생할 수 있기 때문에 이 점은 숙지해야한다.

<br>

## Strong Reference Cycles

클래스 인스턴스를 참조할 때는 기본적으로 강한 참조이다. 강한 참조 순환은 아래 그림 처럼 두 클래스 인스턴스가 서로를 참조하고 있을 때 발생한다. [이미지 출처](https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html#//apple_ref/doc/uid/TP40014097-CH20-ID48)

<img src="https://popsmile.github.io/res/images/TIL/referenceCycle1.png">

위 처럼 `Person` 인스턴스와 `Apartment` 인스턴스가 서로를 강한 참조하고 있으면, 아래 처럼 변수를 `nil` 로 변경하여 각각 인스턴스로의 참조를 끊는다고 하더라도 이 RC가 0이 될 수가 없다..!! 결국 ARC가 이 인스턴스를 해제하지 못하기 때문에, **memory leak** 가 발생한다.

```swift
john = nil
unit4A = nil
```

<img src="https://popsmile.github.io/res/images/TIL/referenceCycle2.png">

<br>

## Weak References

이 순환 참조 문제는 **약한 참조**로 해결할 수 있다. ARC가 약한 참조는 해제할 수 있기 때문이다. 참조되는 인스턴스가 해제될 때, 이 인스턴스를 약한 참조하고있는 부분에 `nil` 값을 할당해준다. 따라서, 약한 참조를 무조건 **옵셔널** 타입의 **변수**이어야 한다. 

이와 비슷한데 옵셔널 타입이 아닌 것으로는 unowned가 있다.